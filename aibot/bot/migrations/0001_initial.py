# Generated by Django 5.1.1 on 2024-09-09 07:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Bookings",
            fields=[
                ("museum_name", models.CharField(max_length=250)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("date", models.DateField()),
                ("slot_9_to_10_seats", models.PositiveIntegerField(default=100)),
                ("slot_9_to_10_queue", models.PositiveIntegerField(default=0)),
                ("slot_10_to_11_seats", models.PositiveIntegerField(default=100)),
                ("slot_10_to_11_queue", models.PositiveIntegerField(default=0)),
                ("slot_11_to_12_seats", models.PositiveIntegerField(default=100)),
                ("slot_11_to_12_queue", models.PositiveIntegerField(default=0)),
                ("slot_12_to_13_seats", models.PositiveIntegerField(default=100)),
                ("slot_12_to_13_queue", models.PositiveIntegerField(default=0)),
                ("slot_13_to_14_seats", models.PositiveIntegerField(default=100)),
                ("slot_13_to_14_queue", models.PositiveIntegerField(default=0)),
                ("slot_14_to_15_seats", models.PositiveIntegerField(default=100)),
                ("slot_14_to_15_queue", models.PositiveIntegerField(default=0)),
                ("slot_15_to_16_seats", models.PositiveIntegerField(default=100)),
                ("slot_15_to_16_queue", models.PositiveIntegerField(default=0)),
                ("slot_16_to_17_seats", models.PositiveIntegerField(default=100)),
                ("slot_16_to_17_queue", models.PositiveIntegerField(default=0)),
                ("slot_17_to_18_seats", models.PositiveIntegerField(default=100)),
                ("slot_17_to_18_queue", models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="Museum",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("state", models.CharField(max_length=100)),
                ("city", models.CharField(max_length=100)),
                ("type", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("location", models.CharField(max_length=200)),
                ("opening_time", models.TimeField(default="09:00")),
                ("closing_time", models.TimeField(default="18:00")),
                ("slot_9_to_10_seats", models.PositiveIntegerField(default=100)),
                ("slot_9_to_10_queue", models.PositiveIntegerField(default=0)),
                ("slot_10_to_11_seats", models.PositiveIntegerField(default=100)),
                ("slot_10_to_11_queue", models.PositiveIntegerField(default=0)),
                ("slot_11_to_12_seats", models.PositiveIntegerField(default=100)),
                ("slot_11_to_12_queue", models.PositiveIntegerField(default=0)),
                ("slot_12_to_13_seats", models.PositiveIntegerField(default=100)),
                ("slot_12_to_13_queue", models.PositiveIntegerField(default=0)),
                ("slot_13_to_14_seats", models.PositiveIntegerField(default=100)),
                ("slot_13_to_14_queue", models.PositiveIntegerField(default=0)),
                ("slot_14_to_15_seats", models.PositiveIntegerField(default=100)),
                ("slot_14_to_15_queue", models.PositiveIntegerField(default=0)),
                ("slot_15_to_16_seats", models.PositiveIntegerField(default=100)),
                ("slot_15_to_16_queue", models.PositiveIntegerField(default=0)),
                ("slot_16_to_17_seats", models.PositiveIntegerField(default=100)),
                ("slot_16_to_17_queue", models.PositiveIntegerField(default=0)),
                ("slot_17_to_18_seats", models.PositiveIntegerField(default=100)),
                ("slot_17_to_18_queue", models.PositiveIntegerField(default=0)),
                ("zone", models.CharField(blank=True, max_length=100, null=True)),
                ("weblinks", models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "username",
                    models.CharField(default="default_username", max_length=150),
                ),
                ("booking_id", models.AutoField(primary_key=True, serialize=False)),
                ("no_of_tickets", models.PositiveIntegerField(default=0)),
                (
                    "booking_status",
                    models.CharField(
                        choices=[("confirmed", "Confirmed"), ("pending", "Pending")],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[("paid", "Paid"), ("unpaid", "Unpaid")],
                        default="unpaid",
                        max_length=20,
                    ),
                ),
                ("slot", models.CharField(blank=True, max_length=100, null=True)),
                ("date", models.DateField()),
                ("waiting_list", models.PositiveIntegerField()),
                (
                    "ticket_pdf",
                    models.FileField(blank=True, null=True, upload_to="tickets/"),
                ),
                ("museum_name_id", models.CharField(max_length=255)),
            ],
            options={
                "ordering": ["date"],
            },
        ),
        migrations.CreateModel(
            name="Login",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "booking_id",
                    models.PositiveBigIntegerField(
                        blank=True, default=1000, unique=True
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
